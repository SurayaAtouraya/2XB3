package final_Project;

public class SortMe {

	private static boolean less(Comparable v, Comparable w) {
		return v.compareTo(w) < 0;
	}

	private static void exch(Comparable[] a, int i, int j) {
		Comparable t  = a[i];
		a[i] = a[j];
		a[j] = t;
	}

	public static boolean isSorted(Comparable[] a) {
		for(int i = 1; i < a.length; i++) {
			if(less(a[i], a[i - 1]))
				return false;
		}
		return true;
	}

	public static void sort(Comparable[] a){

		qSort(a, 0, a.length - 1);

	}

	private static void qSort(Comparable[] a, int lo, int hi){

		if(hi <= lo)
			return;
		int j = partition(a, lo, hi);
		qSort(a, lo, j - 1);
		qSort(a, j + 1, hi);
	}

	private static int partition(Comparable[] a, int lo, int hi){
		int i = lo;
		int j = hi + 1;

		Comparable v = a[lo];
		while(true){
			while(less(a[++i], v))
				if(i == hi) break;
			while(less(v, a[--j]))
				if(j == lo) break;
			if(i >= j) break;
			exch(a, i, j);
		}
		exch(a, lo, j);
		return j;
	}

	public static Comparable[] search(Comparable[] a, Comparable b) {

		Comparable[] output = new Comparable[10];

		int index = bSearch(a, b);

		while(a[index].compareTo(a[index - 1]) == 0) {
			index--;
		}




		//binary search to spot in array, go to end of all
		//equal entries, returns 10 qualifing entries with the
		//best reviews (compareTo must not take into account
		//reviews, must have separate method to compare
		//contractor reviews


		return a;
	}

	private static int bSearch(Comparable[] a, Comparable b) {

		int lo = 0;
		int hi = a.length - 1;
		while(a[lo].compareTo(a[hi]) <= 0) {
			int mid = lo + (hi - lo) /2;

			if(b.compareTo(a[mid]) < 0)
				hi = mid - 1;
			else if(b.compareTo(a[mid]) > 0)
				lo = mid + 1;
			else return mid;

		}

		return 0;
	}




	public static void main(String[] args) {

		Integer[] a = {1, 5, 9, 3, 5, 3, 9, 3, 8, 10};

		sort(a);
		for(int i = 0; i < a.length; i++) {
			System.out.print(a[i] + " ");
		}

	}

}
